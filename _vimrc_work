" File based on https://github.com/amix/vimrc
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
" call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
" Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
" Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
" Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
" Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plugin 'ascenator/L9', {'name': 'newL9'}
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'airblade/vim-gitgutter'
Plugin 'morhetz/gruvbox'
Plugin 'ycm-core/YouCompleteMe'
" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
" filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" TODO
" :help 'list'
" :help folding

" safeguard for re-sourcing
autocmd!
set number
set showcmd
set linebreak
set laststatus=2
set scrolloff=4
set noerrorbells visualbell t_vb= " no beeps of any kind
set winminheight=0
set splitbelow
set confirm
set history=500

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=50

" Turn on the wild menu
set wildmenu

" Give more space for displaying messages.
set cmdheight=2

" A buffer becomes hidden when it is abandoned
set hid

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

" Add a bit extra margin to the left
set foldcolumn=1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4

" Linebreak on 500 characters
set lbr
set tw=500

" Auto indent
set ai
" Smart indent
set si
" Wrap lines
set wrap

set autoread
set autoindent
set background=dark
set ruler
set smartindent
set textwidth=0
set softtabstop=4
set isfname+=/,.
set backspace=indent,eol,start
set nojoinspaces
set colorcolumn=79
highlight ColorColumn ctermbg=0 guibg=lightgrey

let g:gruvbox_contrast_dark = 'hard'
if exists('+termguicolors')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif
" let g:gruvbox_invert_selection='0'

set mouse=a
set nomousehide

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off, since most stuff is in SVN, git etc. anyway...
set nobackup
set nowb
set noswapfile

" PuTTY color schemes hack!
" https://vim.fandom.com/wiki/Using_vim_color_schemes_with_Putty
if &term =~ "xterm"
    " 256 colors
    let &t_Co = 256
    "restore screen after quitting
    let &t_ti = "\<Esc>7\<Esc>[r\<Esc>[?47h"
    let &t_te = "\<Esc>[?471\<Esc>8"
    if has("terminfo")
        let &t_Sf = "\<Esc>[3%p1%dm"
        let &t_Sb = "\<Esc>[4%p1%dm"
    else
        let &t_Sf = "\<Esc>[3%dm"
        let &t_Sb = "\<Esc>[4%dm"
    endif
endif

" Airline specifics
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='gruvbox'

" Gruvbox specifics
" Italic: https://apple.stackexchange.com/questions/266333/how-to-show-italic-in-vim-in-iterm2
let g:gruvbox_bold=1
let g:gruvbox_italic=1
let g:gruvbox_unterline=1
let g:gruvbox_undercurl=1
let g:gruvbox_italicize_comments=1

if has("gui_running")
    set columns=140 lines=45
    if has("gui_gtk2")
        " set guioptions-=tT
        " set guifont=Bitstream\ Vera\ Sans\ Mono\ 10
        set guifont=Monospace\ 8
        colorscheme gruvbox
    elseif has("gui_win32")
        " set guioptions-=tT
        colorscheme gruvbox
        set guifont=Consolas
    endif
else
    " enable Xterm mouse wheel scrolling
    map  <xCSI>[62~ <MouseDown>
    map! <xCSI>[62~ <MouseDown>
    map  <xCSI>[63~ <MouseUp>
    map! <xCSI>[63~ <MouseUp>
    map  <xCSI>[64~ <S-MouseDown>
    map! <xCSI>[64~ <S-MouseDown>
    map  <xCSI>[65~ <S-MouseUp>
    map! <xCSI>[65~ <S-MouseUp>

    if exists(":colorscheme")
        colorscheme gruvbox
    endif
endif

syntax on
